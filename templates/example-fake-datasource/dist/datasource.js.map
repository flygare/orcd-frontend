{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","data","random","Date","parse","status","message","title","targets","filter","target","map","replace","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    //Build options sent from Grafana.\n    var query = this.buildQueryParameters(options);\n\n    //Try to return example from grafana page. Modify example data to whatever needed!\n    return { data: [\n      {\"target\": \"upper_50\",\n      \"datapoints\": [\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T12:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T13:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T14:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T15:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T16:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T17:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T18:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T19:00:00\")), \"Spotify\"],\n          [_.random(0, 1000), Date.parse(new Date(\"2017-02-07T20:00:00\")), \"Spotify\"]\n      ]}\n    ] }\n  }\n\n  testDatasource() {\n    //Fake working back end.\n    return { status: \"success\", message: \"Fake back end is working\", title: \"Success\"};\n  }\n\n  //Does not do anything at the moment. Not needed for example.\n  annotationQuery(options) {\n    //Defined as needed by Grafana. Annotations are disabled in plugin.json.\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}